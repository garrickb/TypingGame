var canvas = document.getElementById("game");
var ctx = canvas.getContext("2d");
var infoCanvas = document.getElementById("gameInfo");
var ctxInfo = infoCanvas.getContext("2d");
canvas.width = 800;
canvas.height = 600;
infoCanvas.width = 800;
infoCanvas.height = 100;
canvas.focus();
window.requestAnimationFrame(run);
window.addEventListener("load", function (a) {
    window.applicationCache.addEventListener("updateready", function (b) {
        if (window.applicationCache.status == window.applicationCache.UPDATEREADY) {
            if (confirm("A new version is available. Load it?")) {
                window.location.reload()
            }
        }
    }, false)
}, false);
ScreenEnum = {MainMenu: 0, Game: 1, Inventory: 2, Store: 3};
var activeScreen = ScreenEnum.Game;
var focus = true;
var tickTime = 0;
var tickRate = 0.05;
var speedMod = 0.65;
var time = Date.now();
var imgScale = 2.5;
var player = {health: 100, damage: 6, exp: 0, gold: 0};
var activeWord;
var currentWord = "";
var bgReady = false;
var bgObj = new Image();
bgObj.onload = function () {
    bgReady = true
};
bgObj.src = "resources/img/room.png";
canvas.addEventListener("click", onGameClick, false);
infoCanvas.addEventListener("click", onInfoClick, false);
var activeMonster;
document.onkeypress = function (a) {
    if (focus) {
        if (a.keyCode == 13) {
            currentWord = "";
            activeMonster = undefined
        } else {
            currentWord += String.fromCharCode(a.keyCode)
        }
        getMonster()
    }
};
document.onkeydown = function (a) {
    if (focus) {
        if (a.keyCode == 8) {
            currentWord = currentWord.substr(0, currentWord.length - 1);
            if (currentWord.length == 0) {
                activeMonster = undefined
            }
            return false
        }
        return true
    }
    return false
};
window.onblur = function () {
    focus = false
};
document.onblur = window.onblur;
function onGameClick(a) {
    if (focus) {
        if (Math.floor(Math.random() * 2) == 0) {
            monsters.push(new Monster(1, a.clientX, a.clientY))
        } else {
            monsters.push(new Monster(2, a.clientX, a.clientY))
        }
    }
}
function onInfoClick(a) {
    if (focus) {
        if (a.clientX > 740 && a.clientY > 700) {
            focus = false
        }
    } else {
        focus = true
    }
}
var loadedMonsters = [];
var monsters = [];
AttributeEnum = {NAME: 0, SRC: 1, HP: 2, MOVE_SPEED: 3, ATTK_SPEED: 4, DAMAGE: 5, EXP: 6, GOLD: 7};
function Monster(b, a, d) {
    this.difficulty = b;
    this.attributes = getAttributes(b);
    if (loadedMonsters[this.attributes[AttributeEnum.SRC]] == null) {
        var c = new Image();
        c.src = this.attributes[AttributeEnum.SRC];
        loadedMonsters[this.attributes[AttributeEnum.SRC]] = c
    }
    this.x = a - loadedMonsters[this.attributes[AttributeEnum.SRC]].width * imgScale / 2;
    this.y = d - loadedMonsters[this.attributes[AttributeEnum.SRC]].height * imgScale / 2;
    this.startX = this.x;
    this.currentHP = this.attributes[AttributeEnum.HP];
    this.destX = this.x;
    this.destY = 500;
    this.word = getWord(b);
    if (activeMonster == undefined) {
        getMonster()
    }
}
Monster.prototype.hit = function () {
    if (this == activeMonster) {
        activeMonster = null
    }
    this.currentHP -= player.damage;
    if (this.currentHP > 0) {
        this.word = getWord(this.difficulty)
    }
};
Monster.prototype.kill = function () {
    player.exp += this.attributes[AttributeEnum.EXP];
    player.gold += this.attributes[AttributeEnum.GOLD];
    this.destroy()
};
Monster.prototype.destroy = function () {
    if (this == activeMonster) {
        activeMonster = undefined
    }
    monsters.splice(monsters.indexOf(this), 1)
};
Monster.prototype.update = function (b) {
    if (this.currentHP <= 0) {
        this.kill();
        return
    }
    var a = this.destX - this.x;
    var c = this.destY - this.y;
    var d = this.attributes[AttributeEnum.MOVE_SPEED];
    if (c != 0) {
        if (a > 0) {
            this.x += ((a > d / 2 * speedMod) ? d / 2 * speedMod : a)
        } else {
            if (a < 0) {
                this.x -= ((a < d / 2 * speedMod) ? d / 2 * speedMod : -a)
            } else {
                if (Math.random() * 100 > 95) {
                    this.destX = this.startX - 75 + Math.random() * 150
                }
            }
        }
    }
    if (c > 0) {
        this.y += d * speedMod
    } else {
        this.y = this.destY
    }
};
Monster.prototype.draw = function () {
    if (this.currentHP > 0) {
        var b = loadedMonsters[this.attributes[AttributeEnum.SRC]].width * imgScale;
        var a = loadedMonsters[this.attributes[AttributeEnum.SRC]].height * imgScale;
        ctx.drawImage(loadedMonsters[this.attributes[AttributeEnum.SRC]], this.x, this.y, b, a);
        ctx.beginPath();
        ctx.fillStyle = "green";
        ctx.rect(this.x, this.y - 5, (this.currentHP / this.attributes[AttributeEnum.HP]) * b, 15);
        ctx.fill();
        ctx.lineWidth = 2;
        ctx.strokeStyle = "black";
        ctx.stroke();
        ctx.beginPath();
        ctx.fillStyle = "red";
        ctx.rect(this.x + (this.currentHP / this.attributes[AttributeEnum.HP]) * b, this.y - 5, b - ((this.currentHP / this.attributes[AttributeEnum.HP]) * b), 15);
        ctx.fill();
        ctx.lineWidth = 2;
        ctx.strokeStyle = "black";
        ctx.stroke()
    }
};
Monster.prototype.drawWord = function () {
    var g = "25pt MarkerFelt-Thin, Comic Sans MS";
    var b = "20pt MarkerFelt-Thin, Comic Sans MS";
    var f = 0;
    var j = this.x;
    var h = this.y - 17;
    if (activeMonster == this) {
        var d = wordCorrectness();
        for (var e = 0; e < 2; e++) {
            ctx.font = g;
            ctx.fillStyle = "green";
            for (var c = 0; c < d[0].length; c++) {
                var a = d[0].charAt(c);
                if (e == 0) {
                    f += ctx.measureText(a).width
                } else {
                    ctx.fillText(a, j, h);
                    j += ctx.measureText(a).width
                }
            }
            ctx.font = b;
            ctx.fillStyle = "black";
            for (c = 0; c < d[1].length; c++) {
                a = d[1].charAt(c);
                if (e == 0) {
                    f += ctx.measureText(a).width
                } else {
                    ctx.fillText(a, j, h);
                    j += ctx.measureText(a).width
                }
            }
            if (e == 0) {
                ctx.fillStyle = "white";
                ctx.beginPath();
                ctx.rect(j - 5, h - 30, f + 10, 40);
                ctx.fill();
                ctx.lineWidth = 5;
                ctx.strokeStyle = "black";
                ctx.stroke()
            }
        }
        ctx.font = "12pt Arial"
    } else {
        ctx.font = b;
        f = ctx.measureText(this.word).width;
        ctx.fillStyle = "white";
        ctx.beginPath();
        ctx.rect(j - 5, h - 30, f + 10, 40);
        ctx.fill();
        ctx.lineWidth = 5;
        ctx.strokeStyle = "black";
        ctx.stroke();
        ctx.fillStyle = "#000";
        ctx.fillText(this.word, j, h);
        ctx.font = "12pt Arial"
    }
};
function getAttributes(b) {
    var c = new Array(8);
    var e;
    var f = -1;
    var g;
    var a = 0;
    switch (b) {
        case 0:
        case 1:
            e = [
                ["Slime", ["resources/img/monster/LivingMoundGreen.PNG", "resources/img/monster/LivingMoundGreenBrown.PNG", "resources/img/monster/LivingMoundMagenta.PNG", "resources/img/monster/LivingMoundOrange.PNG", "resources/img/monster/LivingMoundTeal.PNG"], 10, 5, 4, 5],
                ["Bat", ["resources/img/monster/BatBrown.PNG"], 5, 7, 2, 4],
                ["Centipede", ["resources/img/monster/CentipedeBlue.PNG", "resources/img/monster/CentipedeBrown.PNG", "resources/img/monster/CentipedeGreenDark.PNG", "resources/img/monster/CentipedeGrey.PNG", "resources/img/monster/CentipedePink.PNG", "resources/img/monster/CentipedeRed.PNG", "resources/img/monster/CentipedeSilver.PNG"], 12, 4, 4, 7]
            ];
            f = Math.floor(Math.random() * e.length);
            g = 5;
            if (Math.floor(Math.random() * 100) > 60) {
                a = Math.floor(Math.random() * 5) + 1
            }
            break;
        case 2:
            e = [
                ["Spiky Slime", ["resources/img/monster/LivingMoundBrown.PNG", "resources/img/monster/LivingMoundBrownGreen.PNG", "resources/img/monster/LivingMoundFlesh.PNG", "resources/img/monster/LivingMoundLightGreen.PNG", "resources/img/monster/LivingMoundRed.PNG"], 20, 6, 4, 8],
                ["Tentacle Centipede", ["resources/img/monster/CentipedeBlueTentacles.PNG", "resources/img/monster/CentipedeGreenTentacles.PNG", "resources/img/monster/CentipedeGreenTentacles2.PNG", "resources/img/monster/CentipedeRedTentacles.PNG"], 16, 8, 4, 14]
            ];
            f = Math.floor(Math.random() * e.length);
            g = 5;
            if (Math.floor(Math.random() * 100) > 60) {
                a = Math.floor(Math.random() * 5) + 1
            }
            break;
        default:
            console.error("THIS MONSTER DIFFICULTY IS NOT YET SUPPORTED!");
            break
    }
    for (var d = 0; d < 8; d++) {
        switch (d) {
            case 1:
                c[d] = e[f][d][Math.floor(Math.random() * e[f][d].length)];
                break;
            case 6:
                c[d] = g;
                break;
            case 7:
                c[d] = a;
                break;
            default:
                c[d] = e[f][d];
                break
        }
    }
    return c
}
function getWord(a) {
    var b = [monsters.length];
    for (var c = 0; c < monsters.length; c++) {
        if (monsters[c].word !== undefined) {
            b[c] = monsters[c].word[0]
        }
    }
    var f;
    switch (a) {
        case 0:
        case 1:
            f = ["mom", "dad", "eye", "leg", "arm", "pig", "hen", "cat", "dog", "god", "well", "tree", "yes", "no", "sun", "food", "snow", "day", "tall", "short", "hot", "warm", "poor", "rich", "bull", "ox", "elk", "lion", "bear", "wolf", "goat", "hand", "neck", "nail", "mad", "evil", "here", "over", "back", "there", "why", "how", "now", "time", "swag", "yolo", "moo", "beep", "what", "lap", "coin", "cup", "box", "show", "more", "less", "kill", "kills", "bar", "bars", "barn", "loud", "lord", "sword", "rat", "bag", "war", "axe", "hello", "apple", "pear", "liar", "the", "zen"];
            break;
        case 2:
            f = ["bottle", "spooky", "snatch", "squat", "control", "hashtag", "satchel", "sanitize", "keyboard", "lights", "poster", "sword", "battle", "hatchet", "helmet", "plate", "nobody", "no pants", "shirt", "underwear", "hello there", "scrape", "the cat", "a bat", "an apple", "banana", "#swag", "#yolo", "lying", "squire", "knight", "holy cow", "wiggity what", "boulder", "rocking", "living", "hitting", "dying", "paper cut", "wounded", "zen"];
            break;
        default:
            return"ERROR";
            break
    }
    for (var d = 0; d < b.length; d++) {
        for (var e = 0; e < f.length; e++) {
            if (f[e] != null && b[d] == f[e][0]) {
                f[e] = null
            }
        }
    }
    f = f.filter(function (g) {
        return g
    });
    return f[Math.floor(Math.random() * f.length)]
}
function getMonster() {
    for (var a = 0; a < monsters.length; a++) {
        if (monsters[a].word != undefined && currentWord[0] == monsters[a].word[0]) {
            activeMonster = monsters[a];
            return
        }
    }
    activeMonster = undefined
}
function wordCorrectness() {
    if (activeMonster != undefined) {
        var a = 0;
        for (var b = 0; b < currentWord.length; b++) {
            if (activeMonster.word[b] != undefined) {
                if (currentWord[b] == activeMonster.word[b]) {
                    a++
                } else {
                    break
                }
            }
        }
        var c = [2];
        c[0] = activeMonster.word.substr(0, a);
        c[1] = activeMonster.word.substr(a, activeMonster.word.length);
        if (c[1].length == 0) {
            currentWord = "";
            activeMonster.hit()
        }
        return c
    }
    return undefined
}
var monsterTickCount = 0;
var tickCount = 0;
function update(b) {
    if (focus) {
        if (activeScreen == ScreenEnum.Game) {
            while (tickTime >= tickRate) {
                tickTime -= tickRate;
                for (var a = 0; a < monsters.length; a++) {
                    if (monsters[a] != null) {
                        monsters[a].update()
                    }
                }
                if (tickCount++ >= monsterTickCount) {
                    tickCount -= monsterTickCount;
                    monsterTickCount = 15 + Math.random() * 50;
                    monsters.push(new Monster(0, Math.random() * 600 + 100, 125 + Math.random() * 50))
                }
            }
            tickTime += b
        }
    }
}
function render() {
    ctx.imageSmoothingEnabled = false;
    ctx.webkitImageSmoothingEnabled = false;
    ctx.mozImageSmoothingEnabled = false;
    ctxInfo.imageSmoothingEnabled = false;
    ctxInfo.webkitImageSmoothingEnabled = false;
    ctxInfo.mozImageSmoothingEnabled = false;
    if (activeScreen == ScreenEnum.MainMenu) {
        ctx.fillStyle = "#000";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctxInfo.fillStyle = "white";
        ctxInfo.fillRect(0, 0, infoCanvas.width, infoCanvas.height)
    } else {
        if (activeScreen == ScreenEnum.Game || activeScreen == ScreenEnum.Inventory || activeScreen == ScreenEnum.Store) {
            ctx.fillStyle = "#000";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            if (bgReady) {
                ctx.drawImage(bgObj, 0, 0, 800, 600)
            }
            var c = monsters.slice(0);
            c.sort(function (e, d) {
                return e.y - d.y
            });
            for (var b = 0; b < c.length; b++) {
                c[b].draw()
            }
            for (var a = 0; a < c.length; a++) {
                c[a].drawWord()
            }
            ctx.fillText(currentWord, 10, 20);
            if (focus) {
                ctxInfo.fillStyle = "white";
                ctxInfo.fillRect(0, 0, infoCanvas.width, infoCanvas.height);
                ctxInfo.font = "20pt MarkerFelt-Thin, Comic Sans MS";
                ctxInfo.fillStyle = "#000";
                ctxInfo.fillText("EXP: " + player.exp, 100, 60);
                ctxInfo.fillText("$$$$: " + player.gold, 500, 60);
                if (activeMonster != undefined) {
                    ctxInfo.fillText("CurrMonster: " + activeMonster.word, 225, 60)
                }
                ctxInfo.fillStyle = "red";
                ctxInfo.fillRect(infoCanvas.width - 75, infoCanvas.height - 30, 75, 30);
                ctxInfo.fillStyle = "#000";
                ctxInfo.font = "15pt MarkerFelt-Thin, Comic Sans MS";
                ctxInfo.fillText("pause", infoCanvas.width - 65, infoCanvas.height - 10)
            } else {
                ctx.fillStyle = "rgba(0, 0, 0, 0.65)";
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctxInfo.fillStyle = "white";
                ctxInfo.fillRect(0, 0, canvas.width, canvas.height);
                ctxInfo.font = "40pt MarkerFelt-Thin, Comic Sans MS";
                ctxInfo.fillStyle = "#000";
                ctxInfo.fillText("GAME PAUSED", 185, 57);
                ctxInfo.font = "15pt MarkerFelt-Thin, Comic Sans MS";
                ctxInfo.fillStyle = "blue";
                ctxInfo.fillText("click here to unpause", 280, 80)
            }
            if (activeScreen == ScreenEnum.Inventory) {
                ctx.font = "40pt MarkerFelt-Thin, Comic Sans MS";
                ctx.fillStyle = "#000";
                ctx.fillText("INVENTORY", 200, 200)
            } else {
                if (activeScreen == ScreenEnum.Store) {
                    ctx.font = "40pt MarkerFelt-Thin, Comic Sans MS";
                    ctx.fillStyle = "#000";
                    ctx.fillText("STORE", 200, 200)
                }
            }
        }
    }
}
function run() {
    update((Date.now() - time) / 1000);
    render();
    time = Date.now();
    requestAnimationFrame(run)
};